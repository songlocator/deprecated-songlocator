// Generated by CoffeeScript 1.4.0
/*

  SongLocator.

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var BaseResolver, EventEmitter, Module, ResolverSet, ResolverShortcuts, XMLHttpRequest, extend, idCounter, isArray, uniqueId, urlencode, xhrGET,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

XMLHttpRequest = XMLHttpRequest || require('xmlhttprequest').XMLHttpRequest;

isArray = Array.isArray || function(obj) {
  return toString.call(obj) === '[object Array]';
};

urlencode = function(params) {
  var k, v;
  params = (function() {
    var _results;
    _results = [];
    for (k in params) {
      v = params[k];
      _results.push("" + k + "=" + (encodeURIComponent(v.toString())));
    }
    return _results;
  })();
  return params.join('&');
};

xhrGET = function(options) {
  var callback, params, rawResponse, request, url;
  url = options.url, params = options.params, callback = options.callback, rawResponse = options.rawResponse;
  url = "" + url + "?" + (urlencode(params));
  request = new XMLHttpRequest();
  request.open('GET', url, true);
  request.addEventListener('readystatechange', function() {
    var data;
    if (request.readyState !== 4) {
      return;
    }
    if (request.status === 200) {
      data = rawResponse ? request.responseText : JSON.parse(request.responseText);
      return callback(void 0, data);
    } else {
      return callback(request, void 0);
    }
  });
  return request.send();
};

extend = function() {
  var k, o, obj, objs, v, _i, _len;
  obj = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = objs.length; _i < _len; _i++) {
    o = objs[_i];
    for (k in o) {
      v = o[k];
      obj[k] = v;
    }
  }
  return obj;
};

idCounter = 0;

uniqueId = function(prefix) {
  var id;
  id = ++idCounter + '';
  if (prefix) {
    return prefix + id;
  } else {
    return id;
  }
};

EventEmitter = {
  on: function(name, callback) {
    var handlers, list;
    if (!this.hasOwnProperty("_handlers")) {
      this._handlers = {};
    }
    handlers = this._handlers;
    if (!handlers.hasOwnProperty(name)) {
      handlers[name] = [];
    }
    list = handlers[name];
    return list.push(callback);
  },
  once: function(name, callback) {
    var remove,
      _this = this;
    remove = function() {
      _this.off(name, callback);
      return _this.off(name, remove);
    };
    this.on(name, callback);
    return this.on(name, remove);
  },
  emit: function() {
    var args, handlers, l, list, name, _i, _len, _results;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!this.hasOwnProperty("_handlers")) {
      return;
    }
    handlers = this._handlers;
    if (!handlers.hasOwnProperty(name)) {
      return;
    }
    list = handlers[name];
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      l = list[_i];
      if (!l) {
        continue;
      }
      _results.push(l.apply(this, args));
    }
    return _results;
  },
  off: function(name, callback) {
    var handlers, index, list, _results;
    if (!this.hasOwnProperty("_handlers")) {
      return;
    }
    handlers = this._handlers;
    if (!handlers.hasOwnProperty(name)) {
      return;
    }
    list = handlers[name];
    index = list.indexOf(callback);
    if (index < 0) {
      return;
    }
    list[index] = false;
    if (index === list.length - 1) {
      _results = [];
      while (index >= 0 && !list[index]) {
        list.length--;
        _results.push(index--);
      }
      return _results;
    }
  }
};

EventEmitter.addListener = EventEmitter.on;

EventEmitter.addEventListener = EventEmitter.on;

EventEmitter.removeListener = EventEmitter.off;

EventEmitter.removeEventListener = EventEmitter.off;

EventEmitter.trigger = EventEmitter.emit;

Module = (function() {

  function Module() {}

  Module.include = function() {
    var mixin, mixins, _i, _len, _results;
    mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = mixins.length; _i < _len; _i++) {
      mixin = mixins[_i];
      _results.push(extend(this.prototype, mixin));
    }
    return _results;
  };

  return Module;

})();

ResolverShortcuts = {
  searchDebug: function(query) {
    var qid;
    console.log('s');
    qid = uniqueId('query');
    this.once('results', function(results) {
      return console.log(results.results);
    });
    return this.search(qid, query);
  },
  resolveDebug: function(track, artist, album) {
    var qid;
    qid = uniqueId('resolve');
    this.once('results', function(results) {
      return console.log(results.results);
    });
    return this.resolve(qid, track, artist, album);
  }
};

BaseResolver = (function(_super) {

  __extends(BaseResolver, _super);

  BaseResolver.include(EventEmitter, ResolverShortcuts);

  BaseResolver.prototype.name = void 0;

  BaseResolver.prototype.options = {
    includeRemixes: true,
    includeCovers: true,
    includeLive: true
  };

  function BaseResolver(options) {
    if (options == null) {
      options = {};
    }
    this.options = extend({}, this.options, options);
  }

  BaseResolver.prototype.request = function(opts) {
    return xhrGET(opts);
  };

  BaseResolver.prototype.search = function(qid, query) {};

  BaseResolver.prototype.resolve = function(qid, track, artist, album) {};

  BaseResolver.prototype.results = function(qid, results) {
    if (((results != null ? results.length : void 0) != null) && results.length > 0) {
      return this.emit('results', {
        qid: qid,
        results: results
      });
    }
  };

  return BaseResolver;

})(Module);

ResolverSet = (function(_super) {

  __extends(ResolverSet, _super);

  ResolverSet.include(EventEmitter, ResolverShortcuts);

  function ResolverSet() {
    var resolver, resolvers, _i, _len, _ref,
      _this = this;
    resolvers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.resolvers = resolvers.length && isArray(resolvers) ? resolvers[0] : resolvers;
    _ref = this.resolvers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resolver = _ref[_i];
      resolver.on('results', function(results) {
        return _this.emit('results', results);
      });
    }
  }

  ResolverSet.prototype.search = function(qid, query) {
    var resolver, _i, _len, _ref, _results;
    _ref = this.resolvers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resolver = _ref[_i];
      _results.push(resolver.search(qid, query));
    }
    return _results;
  };

  ResolverSet.prototype.resolve = function(qid, track, artist, album) {
    var resolver, _i, _len, _ref, _results;
    _ref = this.resolvers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resolver = _ref[_i];
      _results.push(resolver.resolve(qid, track, artist, album));
    }
    return _results;
  };

  return ResolverSet;

})(Module);

extend(exports, {
  extend: extend,
  urlencode: urlencode,
  xhrGET: xhrGET,
  uniqueId: uniqueId,
  isArray: isArray,
  BaseResolver: BaseResolver,
  ResolverSet: ResolverSet,
  Module: Module
});

if (typeof window !== "undefined" && window !== null) {
  window.SongLocator = window.SongLocator || {};
  extend(window.SongLocator, exports);
}
