// Generated by CoffeeScript 1.4.0
/*

  SongLocator resolver for SoundCloud.

  2013 (c) Andrey Popp <8mayday@gmail.com>

  Based on Tomahawk YouTube resolver.

  2012 (c) Thierry GÃ¶ckel <thierry@strayrayday.lu>
*/

var BaseResolver, Resolver, capitalize, extend, unquote, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require('./songlocator-base'), BaseResolver = _ref.BaseResolver, extend = _ref.extend;

capitalize = function(s) {
  return s.replace(/(^|\s)([a-z])/g, function(m, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};

unquote = function(s) {
  return s.replace('"', '').replace("'", "");
};

Resolver = (function(_super) {

  __extends(Resolver, _super);

  function Resolver() {
    return Resolver.__super__.constructor.apply(this, arguments);
  }

  Resolver.prototype.name = 'soundcloud';

  Resolver.prototype.options = extend({
    consumerKey: 'TiNg2DRYhBnp01DA3zNag'
  }, BaseResolver.prototype.options);

  Resolver.prototype.getTrack = function(found, orig) {
    if (!this.options.includeCovers && found.search(/cover/i) !== -1 && orig.search(/cover/i) === -1) {
      return null;
    } else if (!this.options.includeRemixes && found.search(/(re)*mix/i) !== -1 && orig.search(/(re)*mix/i) === -1) {
      return null;
    } else if (!this.options.includeLive && found.search(/live/i) !== -1 && orig.search(/live/i) === -1) {
      return null;
    } else {
      return found;
    }
  };

  Resolver.prototype.betterArtwork = function(url) {
    return url.replace('-large', '-t500x500');
  };

  Resolver.prototype.resolve = function(qid, track, artist, album) {
    var query,
      _this = this;
    query = ("" + artist + " " + track).trim();
    return this.request({
      url: 'http://api.soundcloud.com/tracks.json',
      params: {
        consumer_key: this.options.consumerKey,
        filter: 'streamable',
        q: query
      },
      callback: function(error, resp) {
        var r, result, results;
        if (error != null) {
          return;
        }
        if (resp.length === 0) {
          return;
        }
        results = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = resp.length; _i < _len; _i++) {
            r = resp[_i];
            if (!(r != null ? r.streamable : void 0)) {
              continue;
            }
            if ((r.title != null) && (r.title.toLowerCase().indexOf(artist.toLowerCase()) === -1 || r.title.toLowerCase().indexOf(track.toLowerCase()) === -1)) {
              continue;
            }
            if (!this.getTrack(r.title, track)) {
              continue;
            }
            _results.push(result = {
              title: track,
              artist: artist,
              album: void 0,
              source: this.name,
              id: r.id,
              linkURL: r.permalink_url,
              imageURL: this.betterArtwork(r.artwork_url),
              audioURL: "" + r.stream_url + ".json?client_id=" + this.options.consumerKey,
              audioPreviewURL: void 0,
              mimetype: "audio/mpeg",
              duration: r.duration / 1000
            });
          }
          return _results;
        }).call(_this);
        return _this.results(qid, [results[0]]);
      }
    });
  };

  Resolver.prototype.search = function(qid, searchString) {
    var _this = this;
    return this.request({
      url: 'http://api.soundcloud.com/tracks.json',
      params: {
        consumer_key: this.options.consumerKey,
        filter: 'streamable',
        limit: this.options.searchMaxResults,
        q: unquote(searchString)
      },
      callback: function(error, resp) {
        var r, result, results, track;
        if (error != null) {
          return;
        }
        if (resp.length === 0) {
          return;
        }
        results = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = resp.length; _i < _len; _i++) {
            r = resp[_i];
            if (r == null) {
              continue;
            }
            if (!this.getTrack(r.title, '')) {
              continue;
            }
            result = {
              album: void 0,
              source: this.name,
              id: r.id,
              linkURL: r.permalink_url,
              imageURL: this.betterArtwork(r.artwork_url),
              audioURL: "" + r.stream_url + ".json?client_id=" + this.options.consumerKey,
              audioPreviewURL: void 0,
              mimetype: 'audio/mpeg',
              duration: r.duration / 1000
            };
            track = r.title;
            if (track.indexOf(" - ") !== -1 && track.slice(track.indexOf(" - ") + 3).trim() !== "") {
              result.title = track.slice(track.indexOf(" - ") + 3).trim();
              result.artist = track.slice(0, track.indexOf(" - ")).trim();
            } else if (track.indexOf(" -") !== -1 && track.slice(track.indexOf(" -") + 2).trim() !== "") {
              result.title = track.slice(track.indexOf(" -") + 2).trim();
              result.artist = track.slice(0, track.indexOf(" -")).trim();
            } else if (track.indexOf(": ") !== -1 && track.slice(track.indexOf(": ") + 2).trim() !== "") {
              result.title = track.slice(track.indexOf(": ") + 2).trim();
              result.artist = track.slice(0, track.indexOf(": ")).trim();
            } else if (track.indexOf("-") !== -1 && track.slice(track.indexOf("-") + 1).trim() !== "") {
              result.title = track.slice(track.indexOf("-") + 1).trim();
              result.artist = track.slice(0, track.indexOf("-")).trim();
            } else if (track.indexOf(":") !== -1 && track.slice(track.indexOf(":") + 1).trim() !== "") {
              result.title = track.slice(track.indexOf(":") + 1).trim();
              result.artist = track.slice(0, track.indexOf(":")).trim();
            } else if (track.indexOf("\u2014") !== -1 && track.slice(track.indexOf("\u2014") + 2).trim() !== "") {
              result.title = track.slice(track.indexOf("\u2014") + 2).trim();
              result.artist = track.slice(0, track.indexOf("\u2014")).trim();
            } else if (r.title !== "" && r.user.username !== "") {
              result.title = r.title;
              result.artist = r.user.username;
            } else {
              continue;
            }
            _results.push(result);
          }
          return _results;
        }).call(_this);
        return _this.results(qid, results);
      }
    });
  };

  return Resolver;

})(BaseResolver);

extend(exports, {
  Resolver: Resolver
});

if (typeof window !== "undefined" && window !== null) {
  if (!(window.SongLocator != null)) {
    throw new Error('no songlocator-base module was loaded');
  }
  window.SongLocator.SoundCloud = {};
  extend(window.SongLocator.SoundCloud, exports);
}
