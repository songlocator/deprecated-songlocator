define(function(require, exports, module) {
// Generated by CoffeeScript 1.4.0
/*

  Command line interface for SongLocator.

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var MyResolverSet, ResolverSet, rankSearchResults, readFileSync, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = require('./songlocator-base'), ResolverSet = _ref.ResolverSet, rankSearchResults = _ref.rankSearchResults;

readFileSync = require('fs').readFileSync;

exports.readConfigSync = function(filename) {
  if (filename == null) {
    filename = './songlocator.json';
  }
  try {
    return JSON.parse(readFileSync(filename));
  } catch (e) {
    return void 0;
  }
};

exports.parseArguments = function(argv) {
  var arg, args, opts;
  if (argv == null) {
    argv = process.argv;
  }
  argv = argv.splice(2);
  args = [];
  opts = {
    config: void 0,
    resolvers: []
  };
  while (argv.length > 0) {
    arg = argv.shift();
    if (arg === '-c' || args === '--config') {
      opts.config = argv.shift();
    } else if (arg === '--debug') {
      opts.debug = true;
    } else if (arg.substring(0, 6) === '--use-') {
      opts.resolvers.push(arg.substring(6));
    } else {
      args.push(arg);
    }
  }
  return {
    args: args,
    opts: opts
  };
};

MyResolverSet = (function(_super) {

  __extends(MyResolverSet, _super);

  function MyResolverSet() {
    return MyResolverSet.__super__.constructor.apply(this, arguments);
  }

  MyResolverSet.prototype.onResults = function(results) {
    var result, _i, _len, _ref1, _results;
    if (!(results.results.length > 0)) {
      return;
    }
    _ref1 = results.results;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      result = _ref1[_i];
      _results.push(console.log(result));
    }
    return _results;
  };

  return MyResolverSet;

})(ResolverSet);

exports.main = function() {
  var Resolver, cfg, config, name, query, resolver, resolvers;
  query = process.argv[2] != null ? process.argv[2] : (console.log('error: provide a search query as an argument'), process.exit(1));
  config = {
    soundcloud: {}
  };
  resolvers = (function() {
    var _results;
    _results = [];
    for (name in config) {
      cfg = config[name];
      Resolver = require("./songlocator-" + name).Resolver;
      _results.push(new Resolver(cfg));
    }
    return _results;
  })();
  resolver = new MyResolverSet(resolvers);
  return resolver.search('1', query);
};
});
