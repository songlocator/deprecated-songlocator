define(function(require, exports, module) {
// Generated by CoffeeScript 1.4.0
/*

  SongLocator.

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var BaseResolver, EventEmitter, Module, ResolverSet, ResolverShortcuts, XMLHttpRequest, abs, bagOfWords, computeTensor, extend, idCounter, isArray, ngrams, norm, normBagOfWords, pow, rankSearchResult, spaceNormalizeRe, sumArray, tokenNormalizeRe, tokenize, uniqueId, urlencode, xhrGET,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

XMLHttpRequest = XMLHttpRequest || require('xmlhttprequest').XMLHttpRequest;

abs = Math.abs, pow = Math.pow;

isArray = Array.isArray || function(obj) {
  return toString.call(obj) === '[object Array]';
};

urlencode = function(params) {
  var k, v;
  params = (function() {
    var _results;
    _results = [];
    for (k in params) {
      v = params[k];
      _results.push("" + k + "=" + (encodeURIComponent(v.toString())));
    }
    return _results;
  })();
  return params.join('&');
};

xhrGET = function(options) {
  var callback, params, rawResponse, request, url;
  url = options.url, params = options.params, callback = options.callback, rawResponse = options.rawResponse;
  url = "" + url + "?" + (urlencode(params));
  request = new XMLHttpRequest();
  request.open('GET', url, true);
  request.addEventListener('readystatechange', function() {
    var data;
    if (request.readyState !== 4) {
      return;
    }
    if (request.status === 200) {
      data = rawResponse ? request.responseText : JSON.parse(request.responseText);
      return callback(void 0, data);
    } else {
      return callback(request, void 0);
    }
  });
  return request.send();
};

extend = function() {
  var k, o, obj, objs, v, _i, _len;
  obj = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = objs.length; _i < _len; _i++) {
    o = objs[_i];
    for (k in o) {
      v = o[k];
      obj[k] = v;
    }
  }
  return obj;
};

idCounter = 0;

uniqueId = function(prefix) {
  var id;
  id = ++idCounter + '';
  if (prefix) {
    return prefix + id;
  } else {
    return id;
  }
};

EventEmitter = {
  on: function(name, callback) {
    var handlers, list;
    if (!this.hasOwnProperty("_handlers")) {
      this._handlers = {};
    }
    handlers = this._handlers;
    if (!handlers.hasOwnProperty(name)) {
      handlers[name] = [];
    }
    list = handlers[name];
    return list.push(callback);
  },
  once: function(name, callback) {
    var remove,
      _this = this;
    remove = function() {
      _this.off(name, callback);
      return _this.off(name, remove);
    };
    this.on(name, callback);
    return this.on(name, remove);
  },
  emit: function() {
    var args, handlers, l, list, name, _i, _len, _results;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!this.hasOwnProperty("_handlers")) {
      return;
    }
    handlers = this._handlers;
    if (!handlers.hasOwnProperty(name)) {
      return;
    }
    list = handlers[name];
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      l = list[_i];
      if (!l) {
        continue;
      }
      _results.push(l.apply(this, args));
    }
    return _results;
  },
  off: function(name, callback) {
    var handlers, index, list, _results;
    if (!this.hasOwnProperty("_handlers")) {
      return;
    }
    handlers = this._handlers;
    if (!handlers.hasOwnProperty(name)) {
      return;
    }
    list = handlers[name];
    index = list.indexOf(callback);
    if (index < 0) {
      return;
    }
    list[index] = false;
    if (index === list.length - 1) {
      _results = [];
      while (index >= 0 && !list[index]) {
        list.length--;
        _results.push(index--);
      }
      return _results;
    }
  }
};

EventEmitter.addListener = EventEmitter.on;

EventEmitter.addEventListener = EventEmitter.on;

EventEmitter.removeListener = EventEmitter.off;

EventEmitter.removeEventListener = EventEmitter.off;

EventEmitter.trigger = EventEmitter.emit;

Module = (function() {

  function Module() {}

  Module.include = function() {
    var mixin, mixins, _i, _len, _results;
    mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = mixins.length; _i < _len; _i++) {
      mixin = mixins[_i];
      _results.push(extend(this.prototype, mixin));
    }
    return _results;
  };

  return Module;

})();

ResolverShortcuts = {
  searchDebug: function(query) {
    var qid;
    qid = uniqueId('query');
    this.once('results', function(results) {
      return console.log(results.results);
    });
    this.search(qid, query);
  },
  resolveDebug: function(track, artist, album) {
    var qid;
    qid = uniqueId('resolve');
    this.once('results', function(results) {
      return console.log(results.results);
    });
    this.resolve(qid, track, artist, album);
  }
};

BaseResolver = (function(_super) {

  __extends(BaseResolver, _super);

  BaseResolver.include(EventEmitter, ResolverShortcuts);

  BaseResolver.prototype.name = void 0;

  BaseResolver.prototype.options = {
    includeRemixes: true,
    includeCovers: true,
    includeLive: true
  };

  function BaseResolver(options) {
    if (options == null) {
      options = {};
    }
    this.options = extend({}, this.options, options);
  }

  BaseResolver.prototype.request = function(opts) {
    return xhrGET(opts);
  };

  BaseResolver.prototype.search = function(qid, query) {
    throw new Error('not implemented');
  };

  BaseResolver.prototype.resolve = function(qid, track, artist, album) {
    var query;
    query = (artist || '') + (track || '');
    return this.search(qid, query.trim());
  };

  BaseResolver.prototype.results = function(qid, results) {
    if (((results != null ? results.length : void 0) != null) && results.length > 0) {
      return this.emit('results', {
        qid: qid,
        results: results
      });
    }
  };

  return BaseResolver;

})(Module);

ResolverSet = (function(_super) {

  __extends(ResolverSet, _super);

  ResolverSet.include(EventEmitter, ResolverShortcuts);

  function ResolverSet() {
    var resolver, resolvers, _i, _len, _ref,
      _this = this;
    resolvers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.resolvers = isArray(resolvers[0]) ? resolvers[0] : resolvers;
    _ref = this.resolvers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resolver = _ref[_i];
      resolver.on('results', function(results) {
        return _this.emit('results', results);
      });
    }
  }

  ResolverSet.prototype.search = function(qid, query) {
    var resolver, _i, _len, _ref, _results;
    _ref = this.resolvers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resolver = _ref[_i];
      _results.push(resolver.search(qid, query));
    }
    return _results;
  };

  ResolverSet.prototype.resolve = function(qid, track, artist, album) {
    var resolver, _i, _len, _ref, _results;
    _ref = this.resolvers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resolver = _ref[_i];
      _results.push(resolver.resolve(qid, track, artist, album));
    }
    return _results;
  };

  return ResolverSet;

})(Module);

tokenNormalizeRe = /[^a-z0-9 ]+/g;

spaceNormalizeRe = /[ \t\n]+/g;

ngrams = function(toks, rank) {
  var buf, ng, tok, _i, _len, _results;
  if (rank == null) {
    rank = 2;
  }
  buf = [];
  _results = [];
  for (_i = 0, _len = toks.length; _i < _len; _i++) {
    tok = toks[_i];
    buf.push(tok);
    if (buf.length !== rank) {
      continue;
    }
    ng = buf.join(' ');
    buf.shift();
    _results.push(ng);
  }
  return _results;
};

tokenize = function(str, ngram) {
  if (ngram == null) {
    ngram = 1;
  }
  return str.toLowerCase().replace(tokenNormalizeRe, ' ').replace(spaceNormalizeRe, ' ').split(' ').filter(function(tok) {
    return tok && tok.length > 1;
  });
};

bagOfWords = function(toks) {
  var tok, v, _i, _len;
  v = {};
  for (_i = 0, _len = toks.length; _i < _len; _i++) {
    tok = toks[_i];
    if (v[tok]) {
      v[tok] += 1;
    } else {
      v[tok] = 1;
    }
  }
  return v;
};

computeTensor = function(str, ngramDim) {
  var ngramRank, tensor, toks;
  if (ngramDim == null) {
    ngramDim = 1;
  }
  toks = tokenize(str);
  tensor = (function() {
    var _i, _results;
    _results = [];
    for (ngramRank = _i = 1; 1 <= ngramDim ? _i <= ngramDim : _i >= ngramDim; ngramRank = 1 <= ngramDim ? ++_i : --_i) {
      _results.push(bagOfWords(ngramRank === 1 ? toks : ngrams(toks, ngramRank)));
    }
    return _results;
  })();
  return tensor;
};

normBagOfWords = function(v1, v2) {
  var k, keys, ret, ws, x1, x2;
  keys = (function() {
    var _results;
    _results = [];
    for (k in extend({}, v1, v2)) {
      _results.push(k);
    }
    return _results;
  })();
  ws = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      x1 = v1[k] || 0;
      x2 = v2[k] || 0;
      _results.push(abs(x1 - x2));
    }
    return _results;
  })();
  ret = sumArray(ws);
  return ret;
};

sumArray = function(ws) {
  var n, w, _i, _len;
  n = 0;
  for (_i = 0, _len = ws.length; _i < _len; _i++) {
    w = ws[_i];
    n += w;
  }
  return n;
};

norm = function(t1, t2) {
  var a, b, idx, ret, ws;
  if (t1.length !== t2.length) {
    throw new Error('invalid dimensions');
  }
  ws = (function() {
    var _i, _len, _results;
    _results = [];
    for (idx = _i = 0, _len = t1.length; _i < _len; idx = ++_i) {
      a = t1[idx];
      b = t2[idx];
      _results.push(normBagOfWords(a, b) * pow(100, idx));
    }
    return _results;
  })();
  ret = sumArray(ws);
  return ret;
};

rankSearchResult = function(items, query, ngramRank) {
  var queryT;
  queryT = computeTensor(query, ngramRank);
  items = items.slice().sort(function(a, b) {
    return norm(computeTensor(a, ngramRank), queryT) - norm(computeTensor(b, ngramRank), queryT);
  });
  return items;
};

extend(exports, {
  extend: extend,
  urlencode: urlencode,
  xhrGET: xhrGET,
  uniqueId: uniqueId,
  isArray: isArray,
  rankSearchResult: rankSearchResult,
  BaseResolver: BaseResolver,
  ResolverSet: ResolverSet,
  Module: Module
});

if (typeof window !== "undefined" && window !== null) {
  window.SongLocator = window.SongLocator || {};
  extend(window.SongLocator, exports);
}
});
